{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\servi\\\\Documents\\\\EZProjet\\\\YoutubeLibrary\\\\youtube-library-app\\\\src\\\\components\\\\Common\\\\videolist.js\";\nimport React from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport VideoTile from './videoTile';\nimport '../styles/components.css';\nimport 'semantic-ui-css/semantic.min.css';\nexport default class VideoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.data = [];\n  }\n\n  getTitleAndSubtitle(video) {\n    //Return video in the format needed by <VideoTile /> if it's not\n    if (!video.isParsed) {\n      if (video.title.length > 41) {\n        var title = video.title;\n        var subtitle = '';\n        var arr = title.split(' ');\n        title = '';\n        var i = 0;\n\n        while (title.length + arr[i].length < 40) {\n          title = title.concat(arr[i]);\n          title = title.concat(' ');\n          i++;\n        }\n\n        for (let j = i; j < arr.length; j++) {\n          subtitle = subtitle.concat(arr[j]);\n          subtitle = subtitle.concat(' ');\n        }\n\n        return { ...video,\n          title: title,\n          subtitle: subtitle,\n          isParsed: true\n        };\n      } else {\n        video['subtitle'] = '';\n      }\n    }\n\n    return video;\n  }\n\n  render() {\n    this.data = this.props.data;\n\n    for (let i = 0; i < this.data.length; i++) {\n      //Check that all videos are in the good format for <VideoTile />\n      if (this.data[i].subtitle === undefined) {\n        this.data[i]['isParsed'] = false;\n        this.data[i]['subtitle'] = '';\n      }\n\n      var data2 = this.getTitleAndSubtitle(this.data[i]);\n      this.data[i] = data2;\n    }\n\n    return React.createElement(\"div\", {\n      className: 'root' + this.props.side,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(GridList, {\n      cellHeight: 180,\n      className: 'gridList' + this.props.side,\n      cols: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.data.map(tile => React.createElement(VideoTile, {\n      side: this.props.side,\n      key: tile.id,\n      data: tile,\n      gridTileClass: 'gridTile' + this.props.side,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/servi/Documents/EZProjet/YoutubeLibrary/youtube-library-app/src/components/Common/videolist.js"],"names":["React","GridList","VideoTile","VideoList","Component","constructor","props","data","getTitleAndSubtitle","video","isParsed","title","length","subtitle","arr","split","i","concat","j","render","undefined","data2","side","map","tile","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport VideoTile from './videoTile'\r\nimport '../styles/components.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\n\r\nexport default class VideoList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.data = [];\r\n  }\r\n\r\n  getTitleAndSubtitle(video) {            //Return video in the format needed by <VideoTile /> if it's not\r\n\r\n    if(!video.isParsed) {\r\n\r\n      if(video.title.length > 41) {\r\n\r\n          var title = video.title;\r\n          var subtitle='';\r\n          var arr = title.split(' ');\r\n          title = '';\r\n          var i=0;\r\n          while ((title.length + arr[i].length) < 40) {\r\n            title = title.concat(arr[i]);\r\n            title = title.concat(' ');\r\n            i++;\r\n          }\r\n    \r\n          for (let j = i; j < arr.length;j++) {\r\n            subtitle = subtitle.concat(arr[j]);  \r\n            subtitle = subtitle.concat(' ');\r\n          }\r\n\r\n          return {\r\n            ...video,\r\n            title: title,\r\n            subtitle: subtitle,\r\n            isParsed: true\r\n          }\r\n        }\r\n        else {\r\n          video['subtitle'] = '';\r\n        }\r\n    }\r\n    return video;\r\n  }\r\n\r\n  \r\n\r\n  render(){\r\n\r\n    this.data = this.props.data;\r\n  \r\n    for (let i = 0; i < this.data.length; i++) {              //Check that all videos are in the good format for <VideoTile />\r\n      if(this.data[i].subtitle === undefined){\r\n        this.data[i]['isParsed'] = false;\r\n        this.data[i]['subtitle'] = '';\r\n      }\r\n      var data2 = this.getTitleAndSubtitle(this.data[i]);\r\n      this.data[i] = data2;\r\n    }\r\n\r\n    return (\r\n      <div className={'root'+this.props.side} >\r\n        <GridList cellHeight={180} className={'gridList'+this.props.side} cols={1}>\r\n          {this.data.map(tile => (\r\n          \r\n            <VideoTile side={this.props.side} key={tile.id} data={tile} gridTileClass= {'gridTile'+this.props.side} />\r\n            \r\n          ))}\r\n        </GridList>\r\n\r\n          \r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
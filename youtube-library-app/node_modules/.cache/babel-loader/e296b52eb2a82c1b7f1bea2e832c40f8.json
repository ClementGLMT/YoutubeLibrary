{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\servi\\\\Documents\\\\EZProjet\\\\YoutubeLibrary\\\\youtube-library-app\\\\src\\\\components\\\\videolist.js\";\nimport React from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport VideoTile from './videoTile';\nimport { store } from '../store';\nimport './components.css';\nimport 'semantic-ui-css/semantic.min.css';\nexport default class VideoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.data = [];\n    this.update = false;\n  }\n\n  getTitleAndSubtitle(video) {\n    //console.log(\"Video title tested: \"+video.title);\n    if (!video.isParsed) {\n      if (video.title.length > 41) {\n        //console.log('')\n        console.log(\"Video title tested: \" + video.title + \" > 41\");\n        console.log(video.title + \" get parsed\");\n        var title = video.title;\n        var subtitle = '';\n        var arr = title.split(' ');\n        title = ''; // console.log(arr);\n\n        var i = 0;\n\n        while (title.length + arr[i].length < 40) {\n          title = title.concat(arr[i]);\n          title = title.concat(' '); //console.log(\"Title = \"+ title+\" for i = \"+i);\n\n          i++;\n        } //console.log(\"break for i = \"+i);\n\n\n        for (let j = i; j < arr.length; j++) {\n          subtitle = subtitle.concat(arr[j]);\n          subtitle = subtitle.concat(' '); //console.log(\"subtitle = \"+ subtitle+\" for j = \"+j);\n        }\n\n        return { ...video,\n          title: title,\n          subtitle: subtitle,\n          isParsed: true\n        };\n      } else {\n        video['subtitle'] = '';\n      }\n    }\n\n    return video;\n  }\n\n  componentDidMount() {\n    this.data = [];\n  }\n\n  shouldComponentUpdate() {\n    //console.log(\"Should component update called\");\n    return this.update;\n  }\n\n  render() {\n    /*if(!this.props.isDataLoaded){\r\n      console.log(\"Loading tileData\");\r\n      data = tileData;\r\n    }\r\n    else {\r\n      console.log(\"Loading propsData\");\r\n      data = this.props.data;\r\n    }*/\n    this.data = this.props.data; //if(this.props.side === 'OnRight')\n\n    console.log(\"Data in videoList left before treatment: \" + JSON.stringify(this.data));\n\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i].subtitle === undefined) {\n        this.data[i]['isParsed'] = false;\n        this.data[i]['subtitle'] = '';\n      }\n\n      var data2 = this.getTitleAndSubtitle(this.data[i]); //if(!data2.isParsed)\n      //var data2 = this.getTitleAndSubtitle(this.data[i]);\n\n      this.data[i] = data2;\n    }\n\n    this.update = true;\n    /*this.data.map(tile => {\r\n      console.log(tile);\r\n    })*/\n\n    if (this.props.side === 'OnLeft') console.log(\"Data in videoList Left after treatment: \" + JSON.stringify(this.data));\n    if (this.props.side === 'OnRight') console.log(\"%c States : in videolist right\" + JSON.stringify(store.getState().ShowOnRight), 'color:blue');\n    return React.createElement(\"div\", {\n      className: 'root' + this.props.side,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(GridList, {\n      cellHeight: 180,\n      className: 'gridList' + this.props.side,\n      cols: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.data.map(tile => React.createElement(VideoTile, {\n      side: this.props.side,\n      key: tile.id,\n      data: tile,\n      gridTileClass: 'gridTile' + this.props.side,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))));\n  }\n\n}\n/*<GridListTile  key={tile.id} cols={1} className={this.state.gridTileClass}>\r\n<img src={tile.thumbnails[this.state.thumbsize].url} width={tile.thumbnails[this.state.thumbsize].width} height={tile.thumbnails[this.state.thumbsize].height} alt={tile.title} />\r\n<GridListTileBar title={tile.title} />\r\n</GridListTile>*/","map":{"version":3,"sources":["C:/Users/servi/Documents/EZProjet/YoutubeLibrary/youtube-library-app/src/components/videolist.js"],"names":["React","GridList","VideoTile","store","VideoList","Component","constructor","props","data","update","getTitleAndSubtitle","video","isParsed","title","length","console","log","subtitle","arr","split","i","concat","j","componentDidMount","shouldComponentUpdate","render","JSON","stringify","undefined","data2","side","getState","ShowOnRight","map","tile","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport VideoTile from './videoTile'\r\nimport {store} from '../store';\r\nimport './components.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\n\r\nexport default class VideoList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.data = [];\r\n    this.update = false;\r\n  }\r\n\r\n\r\n\r\n  getTitleAndSubtitle(video) {\r\n\r\n\r\n    //console.log(\"Video title tested: \"+video.title);\r\n\r\n    if(!video.isParsed) {\r\n\r\n      if(video.title.length > 41) {\r\n        //console.log('')\r\n      console.log(\"Video title tested: \"+video.title+\" > 41\");\r\n\r\n          console.log(video.title+\" get parsed\");\r\n          var title = video.title;\r\n          var subtitle='';\r\n          var arr = title.split(' ');\r\n          title = '';\r\n         // console.log(arr);\r\n          var i=0;\r\n          while ((title.length + arr[i].length) < 40) {\r\n            title = title.concat(arr[i]);\r\n            title = title.concat(' ');\r\n            //console.log(\"Title = \"+ title+\" for i = \"+i);\r\n              i++;\r\n          }\r\n          //console.log(\"break for i = \"+i);\r\n    \r\n          for (let j = i; j < arr.length;j++) {\r\n            subtitle = subtitle.concat(arr[j]);  \r\n            subtitle = subtitle.concat(' ');\r\n           //console.log(\"subtitle = \"+ subtitle+\" for j = \"+j);\r\n          }\r\n          return {\r\n            ...video,\r\n            title: title,\r\n            subtitle: subtitle,\r\n            isParsed: true\r\n          }\r\n        }\r\n        else {\r\n          video['subtitle'] = '';\r\n        }\r\n    }\r\n    return video;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.data = [];\r\n  }\r\n\r\n  shouldComponentUpdate(){\r\n    //console.log(\"Should component update called\");\r\n      return this.update;\r\n  }\r\n\r\n  \r\n\r\n  render(){\r\n    /*if(!this.props.isDataLoaded){\r\n      console.log(\"Loading tileData\");\r\n      data = tileData;\r\n    }\r\n    else {\r\n      console.log(\"Loading propsData\");\r\n      data = this.props.data;\r\n    }*/\r\n      this.data = this.props.data;\r\n\r\n      //if(this.props.side === 'OnRight')\r\n      console.log(\"Data in videoList left before treatment: \"+JSON.stringify(this.data));\r\n  \r\n    for (let i = 0; i < this.data.length; i++) {\r\n      if(this.data[i].subtitle === undefined){\r\n        this.data[i]['isParsed'] = false;\r\n        this.data[i]['subtitle'] = '';\r\n      }\r\n      var data2 = this.getTitleAndSubtitle(this.data[i]);\r\n      //if(!data2.isParsed)\r\n        //var data2 = this.getTitleAndSubtitle(this.data[i]);\r\n      this.data[i] = data2;\r\n\r\n    }\r\n\r\n    this.update = true;\r\n\r\n    /*this.data.map(tile => {\r\n      console.log(tile);\r\n    })*/\r\n\r\n    if(this.props.side === 'OnLeft')\r\n      console.log(\"Data in videoList Left after treatment: \"+JSON.stringify(this.data));\r\n      if(this.props.side === 'OnRight')\r\n        console.log(\"%c States : in videolist right\"+JSON.stringify(store.getState().ShowOnRight), 'color:blue');\r\n\r\n    return (\r\n        <div className={'root'+this.props.side} >\r\n          <GridList cellHeight={180} className={'gridList'+this.props.side} cols={1}>\r\n            {this.data.map(tile => (\r\n          \r\n            <VideoTile side={this.props.side} key={tile.id} data={tile} gridTileClass= {'gridTile'+this.props.side} />\r\n            \r\n            ))}\r\n          </GridList>\r\n\r\n          \r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/*<GridListTile  key={tile.id} cols={1} className={this.state.gridTileClass}>\r\n<img src={tile.thumbnails[this.state.thumbsize].url} width={tile.thumbnails[this.state.thumbsize].width} height={tile.thumbnails[this.state.thumbsize].height} alt={tile.title} />\r\n<GridListTileBar title={tile.title} />\r\n</GridListTile>*/"]},"metadata":{},"sourceType":"module"}
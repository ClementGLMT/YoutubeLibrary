{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\servi\\\\Documents\\\\EZProjet\\\\YoutubeLibrary\\\\youtube-library-app\\\\src\\\\components\\\\customGridListTileBar.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '@material-ui/styles/withStyles';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    height: 48,\n    background: 'rgba(0, 0, 0, 0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily: theme.typography.fontFamily\n  },\n\n  /* Styles applied to the root element if `titlePosition=\"bottom\"`. */\n  titlePositionBottom: {\n    bottom: 0\n  },\n\n  /* Styles applied to the root element if `titlePosition=\"top\"`. */\n  titlePositionTop: {\n    top: 0\n  },\n\n  /* Styles applied to the root element if a `subtitle` is provided. */\n  rootSubtitle: {\n    height: 68\n  },\n\n  /* Styles applied to the title and subtitle container element. */\n  titleWrap: {\n    flexGrow: 1,\n    marginLeft: 16,\n    marginRight: 16,\n    color: theme.palette.common.white,\n    overflow: 'hidden'\n  },\n\n  /* Styles applied to the container element if `actionPosition=\"left\"`. */\n  titleWrapActionPosLeft: {\n    marginLeft: 0\n  },\n\n  /* Styles applied to the container element if `actionPosition=\"right\"`. */\n  titleWrapActionPosRight: {\n    marginRight: 0\n  },\n\n  /* Styles applied to the title container element. */\n  title: {\n    fontSize: theme.typography.pxToRem(16),\n    lineHeight: '24px',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the subtitle container element. */\n  subtitle: {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the actionIcon if supplied. */\n  actionIcon: {},\n\n  /* Styles applied to the actionIcon if `actionPosition=\"left\"`. */\n  actionIconActionPosLeft: {\n    order: -1\n  }\n});\nconst GridListTileBar = React.forwardRef(function GridListTileBar(props, ref) {\n  const {\n    actionIcon,\n    actionPosition = 'right',\n    classes,\n    className,\n    subtitle,\n    title,\n    titlePosition = 'bottom',\n    ...other\n  } = props;\n  const actionPos = actionIcon && actionPosition;\n  return React.createElement(\"div\", Object.assign({\n    className: clsx(classes.root, {\n      [classes.titlePositionBottom]: titlePosition === 'bottom',\n      [classes.titlePositionTop]: titlePosition === 'top',\n      [classes.rootSubtitle]: subtitle\n    }, className),\n    ref: ref\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: clsx(classes.titleWrap, {\n      [classes.titleWrapActionPosLeft]: actionPos === 'left',\n      [classes.titleWrapActionPosRight]: actionPos === 'right'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, title), subtitle ? React.createElement(\"div\", {\n    className: classes.subtitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, subtitle) : null), actionIcon ? React.createElement(\"div\", {\n    className: clsx(classes.actionIcon, {\n      [classes.actionIconActionPosLeft]: actionPos === 'left'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, actionIcon) : null);\n});\nGridListTileBar.propTypes = {\n  /**\r\n   * An IconButton element to be used as secondary action target\r\n   * (primary action target is the tile itself).\r\n   */\n  actionIcon: PropTypes.node,\n\n  /**\r\n   * Position of secondary action IconButton.\r\n   */\n  actionPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * String or element serving as subtitle (support text).\r\n   */\n  subtitle: PropTypes.node,\n\n  /**\r\n   * Title to be displayed on tile.\r\n   */\n  title: PropTypes.node,\n\n  /**\r\n   * Position of the title bar.\r\n   */\n  titlePosition: PropTypes.oneOf(['top', 'bottom'])\n};\nexport default withStyles(styles, {\n  name: 'MuiGridListTileBar'\n})(GridListTileBar);","map":{"version":3,"sources":["C:/Users/servi/Documents/EZProjet/YoutubeLibrary/youtube-library-app/src/components/customGridListTileBar.js"],"names":["React","PropTypes","clsx","withStyles","styles","theme","root","position","left","right","height","background","display","alignItems","fontFamily","typography","titlePositionBottom","bottom","titlePositionTop","top","rootSubtitle","titleWrap","flexGrow","marginLeft","marginRight","color","palette","common","white","overflow","titleWrapActionPosLeft","titleWrapActionPosRight","title","fontSize","pxToRem","lineHeight","textOverflow","whiteSpace","subtitle","actionIcon","actionIconActionPosLeft","order","GridListTileBar","forwardRef","props","ref","actionPosition","classes","className","titlePosition","other","actionPos","propTypes","node","oneOf","object","isRequired","string","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport withStyles from '@material-ui/styles/withStyles';\r\n\r\nexport const styles = theme => ({\r\n  /* Styles applied to the root element. */\r\n  root: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    height: 48,\r\n    background: 'rgba(0, 0, 0, 0.5)',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    fontFamily: theme.typography.fontFamily,\r\n  },\r\n  /* Styles applied to the root element if `titlePosition=\"bottom\"`. */\r\n  titlePositionBottom: {\r\n    bottom: 0,\r\n  },\r\n  /* Styles applied to the root element if `titlePosition=\"top\"`. */\r\n  titlePositionTop: {\r\n    top: 0,\r\n  },\r\n  /* Styles applied to the root element if a `subtitle` is provided. */\r\n  rootSubtitle: {\r\n    height: 68,\r\n  },\r\n  /* Styles applied to the title and subtitle container element. */\r\n  titleWrap: {\r\n    flexGrow: 1,\r\n    marginLeft: 16,\r\n    marginRight: 16,\r\n    color: theme.palette.common.white,\r\n    overflow: 'hidden',\r\n  },\r\n  /* Styles applied to the container element if `actionPosition=\"left\"`. */\r\n  titleWrapActionPosLeft: {\r\n    marginLeft: 0,\r\n  },\r\n  /* Styles applied to the container element if `actionPosition=\"right\"`. */\r\n  titleWrapActionPosRight: {\r\n    marginRight: 0,\r\n  },\r\n  /* Styles applied to the title container element. */\r\n  title: {\r\n    fontSize: theme.typography.pxToRem(16),\r\n    lineHeight: '24px',\r\n    textOverflow: 'ellipsis',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  /* Styles applied to the subtitle container element. */\r\n  subtitle: {\r\n    fontSize: theme.typography.pxToRem(12),\r\n    lineHeight: 1,\r\n    textOverflow: 'ellipsis',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  /* Styles applied to the actionIcon if supplied. */\r\n  actionIcon: {},\r\n  /* Styles applied to the actionIcon if `actionPosition=\"left\"`. */\r\n  actionIconActionPosLeft: {\r\n    order: -1,\r\n  },\r\n});\r\n\r\nconst GridListTileBar = React.forwardRef(function GridListTileBar(props, ref) {\r\n  const {\r\n    actionIcon,\r\n    actionPosition = 'right',\r\n    classes,\r\n    className,\r\n    subtitle,\r\n    title,\r\n    titlePosition = 'bottom',\r\n    ...other\r\n  } = props;\r\n\r\n  const actionPos = actionIcon && actionPosition;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        classes.root,\r\n        {\r\n          [classes.titlePositionBottom]: titlePosition === 'bottom',\r\n          [classes.titlePositionTop]: titlePosition === 'top',\r\n          [classes.rootSubtitle]: subtitle,\r\n        },\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...other}\r\n    >\r\n      <div\r\n        className={clsx(classes.titleWrap, {\r\n          [classes.titleWrapActionPosLeft]: actionPos === 'left',\r\n          [classes.titleWrapActionPosRight]: actionPos === 'right',\r\n        })}\r\n      >\r\n        <div className={classes.title}>{title}</div>\r\n        {subtitle ? <div className={classes.subtitle}>{subtitle}</div> : null}\r\n      </div>\r\n      {actionIcon ? (\r\n        <div\r\n          className={clsx(classes.actionIcon, {\r\n            [classes.actionIconActionPosLeft]: actionPos === 'left',\r\n          })}\r\n        >\r\n          {actionIcon}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\n\r\nGridListTileBar.propTypes = {\r\n  /**\r\n   * An IconButton element to be used as secondary action target\r\n   * (primary action target is the tile itself).\r\n   */\r\n  actionIcon: PropTypes.node,\r\n  /**\r\n   * Position of secondary action IconButton.\r\n   */\r\n  actionPosition: PropTypes.oneOf(['left', 'right']),\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * String or element serving as subtitle (support text).\r\n   */\r\n  subtitle: PropTypes.node,\r\n  /**\r\n   * Title to be displayed on tile.\r\n   */\r\n  title: PropTypes.node,\r\n  /**\r\n   * Position of the title bar.\r\n   */\r\n  titlePosition: PropTypes.oneOf(['top', 'bottom']),\r\n};\r\n\r\nexport default withStyles(styles, { name: 'MuiGridListTileBar' })(GridListTileBar);"]},"metadata":{},"sourceType":"module"}